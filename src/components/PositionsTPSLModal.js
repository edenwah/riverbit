import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React from "react";
import { useState } from "react";
import ToggleButton from "./ToggleButton";
import PrimaryButton from "./Button/PrimaryButton";
const InfoRow = ({ label, value, valueColor = "text-white" }) => (_jsxs("div", { className: "flex items-center self-stretch", children: [_jsx("span", { className: "flex-1 text-[#9D9DAF] text-sm text-left", children: label }), _jsx("span", { className: `${valueColor} text-sm`, children: value })] }));
const PositionsTPSLModal = ({ data, // Object with position info
inputTPSLPrice, // Stop Loss Price input value
onChangeInputTPSLPrice, // Stop Loss Price input handler
inputTPSLPercent, // Stop Loss % input value
onChangeInputTPSLPercent, // Stop Loss % input handler
onClose, // Optional: close modal handler
onConfirm // Confirm button handler
 }) => {
    const { time: _time, coin, position, entryPrice, markPrice, takeProfit, expectedProfit, } = data;
    const [allocatedAmount, setAllocatedAmount] = useState(false);
    const [limitPrice, setLimitPrice] = useState(false);
    return (_jsx("div", { className: "w-full flex flex-col items-center self-stretch bg-[#000000B0] py-[197px]", children: _jsxs("div", { className: "w-full m-0 md:m-auto flex flex-col bg-[#272B2F] h-[100vh] md:h-auto py-[1px] rounded-lg border border-solid border-gray-700", children: [_jsxs("div", { className: "flex items-center self-stretch p-6 mx-[1px]", children: [_jsx("span", { className: "flex-1 text-white text-lg font-bold", children: "Positions TP/SL" }), _jsx("img", { src: "https://storage.googleapis.com/tagjs-prod.appspot.com/v1/ZlYhP85oka/73d3cc65_expires_30_days.png", className: "w-11 h-11 object-fill cursor-pointer", onClick: onClose })] }), _jsxs("div", { className: "flex flex-col self-stretch pb-6 px-6 mx-[1px] gap-4", children: [_jsxs("div", { className: "flex flex-col self-stretch pt-4 gap-1", children: [_jsx(InfoRow, { label: "Coin", value: coin }), _jsx(InfoRow, { label: "Position", value: position }), _jsx(InfoRow, { label: "Entry Price", value: entryPrice }), _jsx(InfoRow, { label: "Mark Price", value: markPrice }), _jsx(InfoRow, { label: "Take Profit", value: takeProfit }), _jsx("div", { className: "flex flex-col items-end self-stretch", children: _jsxs("span", { className: "text-[#9D9DAF] text-xs mr-[3px]", children: ["Expected Profit: ", expectedProfit] }) })] }), _jsxs("div", { className: "grid grid-cols-2 gap-4 w-full max-w-2xl", children: [_jsxs("div", { className: "flex flex-col gap-2 min-w-0 text-left", children: [_jsx("span", { className: "text-[#9D9DAF] text-sm", children: "Stop Loss Price" }), _jsx("input", { type: "number", placeholder: "240.00", value: inputTPSLPrice, onChange: (e) => onChangeInputTPSLPrice(e.target.value), className: "w-full text-white bg-zinc-950 text-base p-3 rounded-sm border border-[#30363D] focus:outline-none" })] }), _jsxs("div", { className: "flex flex-col gap-2 min-w-0 text-left", children: [_jsx("span", { className: "text-[#9D9DAF] text-sm", children: "Stop Loss %" }), _jsxs("div", { className: "flex items-center bg-zinc-950 p-3 rounded-sm border border-[#30363D] w-full", children: [_jsx("input", { type: "number", placeholder: "%", value: inputTPSLPercent, onChange: (e) => onChangeInputTPSLPercent(e.target.value), className: "flex-1 text-white bg-transparent text-base font-bold border-0 focus:outline-none min-w-0" }), _jsx("span", { className: "text-white text-base ml-2", children: "%" })] })] })] }), _jsxs("div", { className: "flex items-start self-stretch gap-3", children: [_jsx(ToggleButton, { label: "Allocated Amount", value: allocatedAmount, onChange: setAllocatedAmount }), _jsx(ToggleButton, { label: "Limit Price", value: limitPrice, onChange: setLimitPrice })] }), _jsx(PrimaryButton, { size: "large", onClick: onConfirm, children: "Confirm" })] }), _jsx("span", { className: "text-[#8B949E] text-sm my-4 mx-[17px]", children: "By default, take-profit and stop-loss orders apply to the entire position. Once the position is closed, TP/SL orders will be automatically cancelled. When the take-profit or stop-loss price is reached, a market order will be triggered. If a fixed order size is configured, the TP/SL order will always be executed with that size, regardless of future changes in the position." })] }) }));
};
export default PositionsTPSLModal;
